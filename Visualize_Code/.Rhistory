#view map in browser
q.map1
library(leafletR)
download.file("http://carte-gps-gratuite.fr/radars/zones-de-danger-destinator.zip","radar.zip")
unzip("radar.zip")
ext_radar=function(nf){
radar=read.table(file=paste("destinator/",nf,sep=""), sep = ",", header = FALSE, stringsAsFactors = FALSE)
radar$type <- sapply(radar$V3, function(x) {z=as.numeric(unlist(strsplit(x, " ")[[1]])); return(z[!is.na(z)])})
radar <- radar[,c(1,2,4)]
names(radar) <- c("lon", "lat", "type")
return(radar)}
L=list.files("./destinator/")
nl=nchar(L)
id=which(substr(L,4,8)=="Radar" & substr(L,nl-2,nl)=="csv")
radar_E=NULL
for(i in id) radar_E=rbind(radar_E,ext_radar(L[i]))
View(radar_E)
View(radar_E)
fileUrl <- "http://evadeo.typepad.fr/.a/6a00d8341c87ef53ef01310f9238e6970c-800wi"
download.file(fileUrl,"radar.png", mode = 'wb')
RadarICON <- makeIcon(  iconUrl = fileUrl,   iconWidth = 20, iconHeight = 20)
#
m <- leaflet(data = radar_E)
m <- m %>% addTiles()
m <- m %>% addMarkers(~lon, ~lat, icon = RadarICON, popup = ~as.character(type))
m
ileUrl <- "http://evadeo.typepad.fr/.a/6a00d8341c87ef53ef01310f9238e6970c-800wi"
download.file(fileUrl,"radar.png", mode = 'wb')
RadarICON <- makeIcon(  iconUrl = fileUrl,   iconWidth = 20, iconHeight = 20)
#
m <- leaflet(data = radar_E)
m <- m %>% addTiles()
m <- m %>% addMarkers(~lon, ~lat, icon = RadarICON, popup = ~as.character(type))
m
fileUrl <- "http://evadeo.typepad.fr/.a/6a00d8341c87ef53ef01310f9238e6970c-800wi"
download.file(fileUrl,"radar.png", mode = 'wb')
RadarICON <- makeIcon(  iconUrl = fileUrl,   iconWidth = 20, iconHeight = 20)
#
m <- leaflet(data = radar_E)
m <- m %>% addTiles()
m <- m %>% addMarkers(~lon, ~lat, icon = RadarICON, popup = ~as.character(type))
m
m <- m %>% addTiles()
m <- leaflet(data = radar_E)
m <- m %>%addTiles()
m <- m %>%addMarkers(~lon, ~lat, icon = RadarICON, popup = ~as.character(type))
m <- leaflet(radar_E)
m <- leaflet(radar_E)
m <- m %>% addTiles()
fileUrl <- "http://evadeo.typepad.fr/.a/6a00d8341c87ef53ef01310f9238e6970c-800wi"
download.file(fileUrl,"radar.png", mode = 'wb')
RadarICON <- makeIcon(iconUrl = fileUrl, iconWidth = 20, iconHeight = 20)
#
m <- leaflet(data = radar_E)
m <- m %>% addTiles()
m <- m %>% addMarkers(~lon, ~lat, icon = RadarICON, popup = ~as.character(type))
m
#
m <- leaflet(radar_E)
m <- m %>% addTiles()
m <- m %>% addMarkers(~lon, ~lat, clusterOptions = markerClusterOptions())
m
library(dplyr)
m <- leaflet(data = radar_E)
m <- leaflet(data = radar_E)
m <- m %>% addTiles()
m <- m %>% addMarkers(~lon, ~lat, icon = RadarICON, popup = ~as.character(type))
m
L=list.files("./destinator/")
nl=nchar(L)
id=which(substr(L,4,8)=="Radar" & substr(L,nl-2,nl)=="csv")
radar_E=NULL
for(i in id) radar_E=rbind(radar_E,ext_radar(L[i]))
#
fileUrl <- "http://evadeo.typepad.fr/.a/6a00d8341c87ef53ef01310f9238e6970c-800wi"
download.file(fileUrl,"radar.png", mode = 'wb')
RadarICON <- makeIcon(iconUrl = fileUrl, iconWidth = 20, iconHeight = 20)
#
m <- leaflet(data = radar_E)
m <- m %>% addTiles()
m <- m %>% addMarkers(~lon, ~lat, icon = RadarICON, popup = ~as.character(type))
m
#
m <- leaflet(radar_E)
m <- m %>% addTiles()
m <- m %>% addMarkers(~lon, ~lat, clusterOptions = markerClusterOptions())
m
library(leafletR)
library(dplyr)
download.file("http://carte-gps-gratuite.fr/radars/zones-de-danger-destinator.zip","radar.zip")
unzip("radar.zip")
ext_radar=function(nf){
radar=read.table(file=paste("destinator/",nf,sep=""), sep = ",", header = FALSE, stringsAsFactors = FALSE)
radar$type <- sapply(radar$V3, function(x) {z=as.numeric(unlist(strsplit(x, " ")[[1]])); return(z[!is.na(z)])})
radar <- radar[,c(1,2,4)]
names(radar) <- c("lon", "lat", "type")
return(radar)}
L=list.files("./destinator/")
nl=nchar(L)
id=which(substr(L,4,8)=="Radar" & substr(L,nl-2,nl)=="csv")
radar_E=NULL
for(i in id) radar_E=rbind(radar_E,ext_radar(L[i]))
#
fileUrl <- "http://evadeo.typepad.fr/.a/6a00d8341c87ef53ef01310f9238e6970c-800wi"
download.file(fileUrl,"radar.png", mode = 'wb')
RadarICON <- makeIcon(iconUrl = fileUrl, iconWidth = 20, iconHeight = 20)
#
m <- leaflet(data = radar_E)
m <- m %>% addTiles()
m <- m %>% addMarkers(~lon, ~lat, icon = RadarICON, popup = ~as.character(type))
m
#
m <- leaflet(radar_E)
m <- m %>% addTiles()
m <- m %>% addMarkers(~lon, ~lat, clusterOptions = markerClusterOptions())
m
m <- leaflet(data = radar_E)
m <- m %>% addTiles()
library(leafletR)
library(dplyr)
ext_radar=function(nf){
radar=read.table(file=paste("destinator/",nf,sep=""), sep = ",", header = FALSE, stringsAsFactors = FALSE)
radar$type <- sapply(radar$V3, function(x) {z=as.numeric(unlist(strsplit(x, " ")[[1]])); return(z[!is.na(z)])})
radar <- radar[,c(1,2,4)]
names(radar) <- c("lon", "lat", "type")
return(radar)}
L=list.files("./destinator/")
nl=nchar(L)
id=which(substr(L,4,8)=="Radar" & substr(L,nl-2,nl)=="csv")
radar_E=NULL
for(i in id) radar_E=rbind(radar_E,ext_radar(L[i]))
fileUrl <- "http://evadeo.typepad.fr/.a/6a00d8341c87ef53ef01310f9238e6970c-800wi"
download.file(fileUrl,"radar.png", mode = 'wb')
RadarICON <- makeIcon(iconUrl = fileUrl, iconWidth = 20, iconHeight = 20)
RadarICON <- makeIcon(iconUrl = fileUrl, iconWidth = 20, iconHeight = 20)
RadarICON <- makeIcon(iconUrl = fileUrl, iconWidth = 20, iconHeight = 20)
?makeIcon
m <- leaflet(data = radar_E)
m <- leaflet(data = radar_E)
m = leaflet(data = radar_E)
radar_E
m <- leaflet(data = radar_E)
m <- leaflet(data = radar_E, header = T)
m <- leaflet(data = radar_E)
m <- leaflet(radar_E)
?addMarkers
library(leafletR)
library(dplyr)
?addMarkers
library(shiny)
library(leaflet)
r_colors <- rgb(t(col2rgb(colors()) / 255))
names(r_colors) <- colors()
ui <- fluidPage(
leafletOutput("mymap"),
p(),
actionButton("recalc", "New points")
)
server <- function(input, output, session) {
points <- eventReactive(input$recalc, {
cbind(rnorm(40) * 2 + 13, rnorm(40) + 48)
}, ignoreNULL = FALSE)
output$mymap <- renderLeaflet({
leaflet() %>%
addProviderTiles(providers$Stamen.TonerLite,
options = providerTileOptions(noWrap = TRUE)
) %>%
addMarkers(data = points())
})
}
shinyApp(ui, server)
library(leafletR)
library(dplyr)
library(shiny)
library(leaflet)
r_colors <- rgb(t(col2rgb(colors()) / 255))
names(r_colors) <- colors()
ui <- fluidPage(
leafletOutput("mymap"),
p(),
actionButton("recalc", "New points")
)
server <- function(input, output, session) {
points <- eventReactive(input$recalc, {
cbind(rnorm(40) * 2 + 13, rnorm(40) + 48)
}, ignoreNULL = FALSE)
output$mymap <- renderLeaflet({
leaflet() %>%
addProviderTiles(providers$Stamen.TonerLite,
options = providerTileOptions(noWrap = TRUE)
) %>%
addMarkers(data = points())
})
}
shinyApp(ui, server)
library(rMaps)
library(rCharts)
library(leafletR)
library(rCharts)
library(leafletR)
leaflet(quakes) %>% addTiles() %>% addMarkers(
clusterOptions = markerClusterOptions()
)
leaflet(quakes) %>% addTiles() %>% addMarkers(
clusterOptions = markerClusterOptions()
)
q.map2 %>% addTiles() %>% addMarkers(clusterOptions = markerClusterOptions())
m2 <- read.csv("Goyang.csv")
m2$대장가액.원. <- ifelse(is.na(m2$대장가액.원.), 0, m2$대장가액.원.)
m2$avg_price = (m2$대장가액.원./m2$재산면적)
m2$avg_price <- ifelse(is.na(m2$avg_price), 0, m2$avg_price)
m2$avg_price = round(m2$avg_price)
m2 <- data.frame(m2$latitude, m2$longitude, m2$공부지목명, m2$재산면적, m2$대장가액.원., m2$avg_price)
colnames(m2) <- c('lat', 'lon', 'assets_name', 'size', 'tot_price', 'avg_price')
m2$assets <- as.character(m2$assets)
# store data in GeoJSON file (just a subset here)
q.dat2 <- toGeoJSON(data=m2[1:200,], dest = tempdir(), name="Goyang")
#make style based on avg_price
#평당 가격(0만원~100만원, 10만원씩 분류)
q.style <- styleGrad(prop="avg_price", breaks=seq(0, 1000000, by= 100000),
style.val=rev(heat.colors(10)), leg="avg_price",
fill.alpha=1, rad=8)
#create map
q.map2 <- leaflet(data=q.dat2, dest = tempdir(), title="Goyang",
base.map="osm", style=q.style, popup="*")
q.dat2 <- toGeoJSON(data=m2[1:200,], dest = tempdir(), name="Goyang")
library(rMaps)
library(rCharts)
library(leafletR)
q.dat2 <- toGeoJSON(data=m2[1:200,], dest = tempdir(), name="Goyang")
m2 <- read.csv("Goyang.csv")
m2$대장가액.원. <- ifelse(is.na(m2$대장가액.원.), 0, m2$대장가액.원.)
m2$avg_price = (m2$대장가액.원./m2$재산면적)
m2$avg_price <- ifelse(is.na(m2$avg_price), 0, m2$avg_price)
m2$avg_price = round(m2$avg_price)
m2 <- data.frame(m2$latitude, m2$longitude, m2$공부지목명, m2$재산면적, m2$대장가액.원., m2$avg_price)
colnames(m2) <- c('lat', 'lon', 'assets_name', 'size', 'tot_price', 'avg_price')
m2$assets <- as.character(m2$assets)
# store data in GeoJSON file (just a subset here)
q.dat2 <- toGeoJSON(data=m2[1:200,], dest = tempdir(), name="Goyang")
q.dat2 <- toGeoJSON(data=m2[1:200, ] ,dest = tempdir(), name="Goyang")
q.dat2 <- toGeoJSON(data=m2[1:200, ] ,dest = tempdir(), name="Goyang")
q.dat2 <- toGeoJSON(data=m2[1:200, ] ,dest = tempdir(), name="Goyang")
install.packages("NLP")
q.dat2 <- toGeoJSON(data=m2[1:200, ] ,dest = tempdir(), name="Goyang")
q.dat2 <- toGeoJSON(data=m2[1:200, ] ,dest = tempdir(), name="Goyang")
setwd("C:/Users/Victor/Desktop/경기 BDS/5. 팀프로젝트/1. 공유재산/시각화 코드")
m2 <- read.csv("Goyang.csv")
m2$대장가액.원. <- ifelse(is.na(m2$대장가액.원.), 0, m2$대장가액.원.)
m2$avg_price = (m2$대장가액.원./m2$재산면적)
m2$avg_price <- ifelse(is.na(m2$avg_price), 0, m2$avg_price)
m2$avg_price = round(m2$avg_price)
m2 <- data.frame(m2$latitude, m2$longitude, m2$공부지목명, m2$재산면적, m2$대장가액.원., m2$avg_price)
colnames(m2) <- c('lat', 'lon', 'assets_name', 'size', 'tot_price', 'avg_price')
m2$assets <- as.character(m2$assets)
q.dat2 <- toGeoJSON(data=m2[1:200, ] ,dest = tempdir(), name="Goyang")
q.dat2 <- toGeoJSON(data=m2,dest = tempdir(), name="Goyang")
q.dat2 <- toGeoJSON(data=m2[1:200,], dest = tempdir(), name="Goyang")
View(m2)
m2$대장가액.원. <- ifelse(is.na(m2$대장가액.원.), 0, m2$대장가액.원.)
m2$avg_price = (m2$대장가액.원./m2$재산면적)
m2$대장가액.원. <- ifelse(is.na(m2$대장가액.원.), 0, m2$대장가액.원.)
m2 <- read.csv("Goyang.csv")
m2$대장가액.원. <- ifelse(is.na(m2$대장가액.원.), 0, m2$대장가액.원.)
m2$avg_price = (m2$대장가액.원./m2$재산면적)
m2$avg_price <- ifelse(is.na(m2$avg_price), 0, m2$avg_price)
m2$avg_price = round(m2$avg_price)
m2 <- data.frame(m2$latitude, m2$longitude, m2$공부지목명, m2$재산면적, m2$대장가액.원., m2$avg_price)
colnames(m2) <- c('lat', 'lon', 'assets_name', 'size', 'tot_price', 'avg_price')
m2$assets_name <- as.character(m2$assets_name)
q.dat2 <- toGeoJSON(data=m2[1:200,], dest = tempdir(), name="Goyang")
q.dat2 <- toGeoJSON(data=m2[1:200,], dest = tempdir(), name="Goyang")
q.dat2 <- toGeoJSON(data=m2[1:200,], dest = tempdir(), name="Goyang")
m3 <- read.csv("clusterd.csv")
m3 <- data.frame(m3)
#store data in GeoJSON file (just a subset here)
q.dat <- toGeoJSON(data=m3, dest= tempdir(), name="cluster")
#make style based on clustercut
q.style <- styleCat(prop="clustercut", val= c("1", "2", "3", "4"),
style.val= c("red", "blue", "green", "yellow"), leg="clustercut")
#create map
q.map <- leaflet(data=q.dat, dest= tempdir(), title="cluster",
base.map="osm", style=q.style, popup="*")
#view map in browser
q.map
m2 <- read.csv("Goyang.csv")
m2$대장가액.원. <- ifelse(is.na(m2$대장가액.원.), 0, m2$대장가액.원.)
m2$avg_price = (m2$대장가액.원./m2$재산면적)
m2$avg_price <- ifelse(is.na(m2$avg_price), 0, m2$avg_price)
m2$avg_price = round(m2$avg_price)
m2 <- data.frame(m2$latitude, m2$longitude, m2$공부지목명, m2$재산면적, m2$대장가액.원., m2$avg_price)
colnames(m2) <- c('lat', 'lon', 'assets_name', 'size', 'tot_price', 'avg_price')
m2$assets_name <- as.character(m2$assets_name)
q.dat2 <- toGeoJSON(data=m2[1:200,], dest = tempdir(), name="Goyang")
library(ggplot2)
library(wordcloud)
library(googleVis)
library(ggmap)
install.packages("devtools", dependencies = T)
library(devtools)
install_github('rCharts', 'ramnathv')
install_github('rCharts', 'ramnathv')
install_github('rMaps', 'ramnathv')
devtools::install_github("chgrl/leafletR")
library(rMaps)
library(rCharts)
library(leafletR)
m2 <- read.csv("Goyang.csv")
m2$대장가액.원. <- ifelse(is.na(m2$대장가액.원.), 0, m2$대장가액.원.)
m2$avg_price = (m2$대장가액.원./m2$재산면적)
m2$avg_price <- ifelse(is.na(m2$avg_price), 0, m2$avg_price)
m2$avg_price = round(m2$avg_price)
m2 <- data.frame(m2$latitude, m2$longitude, m2$공부지목명, m2$재산면적, m2$대장가액.원., m2$avg_price)
colnames(m2) <- c('lat', 'lon', 'assets_name', 'size', 'tot_price', 'avg_price')
m2$assets_name <- as.character(m2$assets_name)
q.dat2 <- toGeoJSON(data=m2[1:200,], dest = tempdir(), name="Goyang")
q.style <- styleGrad(prop="avg_price", breaks=seq(0, 1000000, by= 100000),
style.val=rev(heat.colors(10)), leg="avg_price",
fill.alpha=1, rad=8)
q.map2 <- leaflet(data=q.dat2, dest = tempdir(), title="Goyang",
base.map="osm", style=q.style, popup="*")
q.map2 %>% addTiles() %>% addMarkers(clusterOptions = markerClusterOptions())
library(dplyr)
q.map2 <- leaflet(data=q.dat2, dest = tempdir(), title="Goyang",
base.map="osm", style=q.style, popup="*")
q.map2 %>% addTiles() %>% addMarkers(clusterOptions = markerClusterOptions())
?addTiles
addTiles()
install.packages("leaflet")
library(leaflet)
q.map2 <- leaflet(data=q.dat2, dest = tempdir(), title="Goyang",
base.map="osm", style=q.style, popup="*")
q.map2 <- leaflet(data=q.dat2, dest = tempdir(), title="Goyang",
base.map="osm", style=q.style, popup="*")
q.map2 <- leaflet(data=q.dat2, dest = tempdir(), title="Goyang",
base.map="osm", style=q.style, popup="*")
q.map2 %>% addTiles() %>% addMarkers(clusterOptions = markerClusterOptions())
q.map2 %>% addTiles() %>% addMarkers(clusterOptions = markerClusterOptions())
library(leafletR)
q.dat2 <- toGeoJSON(data=m2[1:200,], dest = tempdir(), name="Goyang")
q.style <- styleGrad(prop="avg_price", breaks=seq(0, 1000000, by= 100000),
style.val=rev(heat.colors(10)), leg="avg_price",
fill.alpha=1, rad=8)
q.map2 <- leaflet(data=q.dat2, dest = tempdir(), title="Goyang",
base.map="osm", style=q.style, popup="*")
q.map2 <- leaflet(data=q.dat2, dest = tempdir(), title="Goyang",
base.map="osm", style=q.style, popup="*")
m <- leaflet(q.dat2)
m
m
m <- leaflet(m2) %>% addTiles() %>% addMarkers()
m
?addMarkers
m <- leaflet(m2) %>% addTiles() %>% addMarkers(lng = ~longitude, lat = ~latitude)
m <- leaflet(m2) %>% addTiles() %>% addMarkers(lng = ~m2$longitude, lat = ~m2$latitude)
View(m2)
m <- leaflet(m2) %>% addTiles() %>% addMarkers(lng = ~m2$lon, lat = ~m2$lat)
m
m <- leaflet(m2) %>% addTiles() %>% addMarkers(lng = ~m2$lon,
lat = ~m2$lat, clusterOptions = markerClusterOptions())
m
m2 <- read.csv("Goyang.csv")
op <- leaflet(m2)
op <- op %>% addTiles()
op <- op %>% addMarkers(~lon, ~lat, clusterOptions = markerClusterOptions())
leaflet(m2) %>% addTiles() %>% addMarkers(clusterOptions = markerClusterOptions())
leaflet(m2) %>% addTiles() %>% addMarkers(clusterOptions = markerClusterOptions())
View(m2)
m2 <- read.csv("Goyang.csv")
View(m2)
m2 <- read.csv("Goyang.csv")
m2$대장가액.원. <- ifelse(is.na(m2$대장가액.원.), 0, m2$대장가액.원.)
m2$avg_price = (m2$대장가액.원./m2$재산면적)
m2$avg_price <- ifelse(is.na(m2$avg_price), 0, m2$avg_price)
m2$avg_price = round(m2$avg_price)
m2 <- data.frame(m2$latitude, m2$longitude, m2$공부지목명, m2$재산면적, m2$대장가액.원., m2$avg_price)
colnames(m2) <- c('lat', 'lon', 'assets_name', 'size', 'tot_price', 'avg_price')
m2$assets_name <- as.character(m2$assets_name)
op <- leaflet(m2)
op <- op %>% addTiles()
op <- op %>% addMarkers(~lon, ~lat, clusterOptions = markerClusterOptions())
leaflet(m2) %>% addTiles() %>% addMarkers(clusterOptions = markerClusterOptions())
View(m2)
op <- leaflet(m2)
op <- op %>% addTiles()
op <- op %>% addMarkers(~lon, ~lat, clusterOptions = markerClusterOptions())
leaflet(op) %>% addTiles() %>% addMarkers(clusterOptions = markerClusterOptions())
leaflet(m2) %>% addTiles() %>% addMarkers(clusterOptions = markerClusterOptions())
op <- leaflet(m2)
op <- op %>% addTiles()
op <- op %>% addMarkers(~lon, ~lat, clusterOptions = markerClusterOptions())
leaflet(m2) %>% addTiles() %>% addMarkers(clusterOptions = markerClusterOptions())
m2
op
str(op)
op <- leaflet(ted)
op <- op %>% addTiles()
op <- op %>% addMarkers(~lon, ~lat, clusterOptions = markerClusterOptions())
op
data(quakes)
View(quakes)
leaflet(quakes) %>% addTiles() %>% addMarkers(clusterOptions = markerClusterOptions())
leaflet(ted) %>% addTiles() %>% addMarkers(clusterOptions = markerClusterOptions())
ted<-read.csv("경기도 안성시.csv")
op <- leaflet(ted)
op <- op %>% addTiles()
op <- op %>% addMarkers(~lon, ~lat, clusterOptions = markerClusterOptions())
op
ted<-read.csv("경기도 안성시.csv")
op <- leaflet(ted)
op <- op %>% addTiles()
op <- op %>% addMarkers(~lon, ~lat, clusterOptions = markerClusterOptions())
op
data(quakes)
View(quakes)
leaflet(quakes) %>% addTiles() %>% addMarkers(clusterOptions = markerClusterOptions())
leaflet(ted) %>% addTiles() %>% addMarkers(clusterOptions = markerClusterOptions())
m2 <- read.csv("Goyang.csv")
m2$대장가액.원. <- ifelse(is.na(m2$대장가액.원.), 0, m2$대장가액.원.)
m2$avg_price = (m2$대장가액.원./m2$재산면적)
m2$avg_price <- ifelse(is.na(m2$avg_price), 0, m2$avg_price)
m2$avg_price = round(m2$avg_price)
m2 <- data.frame(m2$latitude, m2$longitude, m2$공부지목명, m2$재산면적, m2$대장가액.원., m2$avg_price)
colnames(m2) <- c('lat', 'lon', 'assets_name', 'size', 'tot_price', 'avg_price')
m2$assets_name <- as.character(m2$assets_name)
op <- leaflet(m2)
op <- op %>% addTiles()
op <- op %>% addMarkers(~lon, ~lat, clusterOptions = markerClusterOptions())
leaflet(m2) %>% addTiles() %>% addMarkers(clusterOptions = markerClusterOptions())
library("leaflet", lib.loc="~/R/win-library/3.3")
library("leafletR", lib.loc="~/R/win-library/3.3")
op <- leaflet(m2)
op <- op %>% addTiles()
op <- op %>% addMarkers(~lon, ~lat, clusterOptions = markerClusterOptions())
leaflet(m2) %>% addTiles() %>% addMarkers(clusterOptions = markerClusterOptions())
library(rMaps)
library(rCharts)
library(leafletR)
library(dplyr)
library(leaflet)
op <- leaflet(m2)
op <- op %>% addTiles()
op <- op %>% addMarkers(~lon, ~lat, clusterOptions = markerClusterOptions())
leaflet(m2) %>% addTiles() %>% addMarkers(clusterOptions = markerClusterOptions())
detach("package:leaflet", unload=TRUE)
detach("package:leafletR", unload=TRUE)
library(ggplot2)
library(wordcloud)
library(ggmap)
library(googleVis)
install.packages("devtools", dependencies = T)
library(devtools)
install_github('rCharts', 'ramnathv')
install_github('rMaps', 'ramnathv')
devtools::install_github("chgrl/leafletR")
library(rMaps)
library(rCharts)
library(leafletR)
library(dplyr)
install.packages("leaflet")
library(leaflet)
m2 <- read.csv("Goyang.csv")
m2$대장가액.원. <- ifelse(is.na(m2$대장가액.원.), 0, m2$대장가액.원.)
m2$avg_price = (m2$대장가액.원./m2$재산면적)
m2$avg_price <- ifelse(is.na(m2$avg_price), 0, m2$avg_price)
m2$avg_price = round(m2$avg_price)
m2 <- data.frame(m2$latitude, m2$longitude, m2$공부지목명, m2$재산면적, m2$대장가액.원., m2$avg_price)
colnames(m2) <- c('lat', 'lon', 'assets_name', 'size', 'tot_price', 'avg_price')
m2$assets_name <- as.character(m2$assets_name)
View(m2)
op <- leaflet(m2)
op <- op %>% addTiles()
op <- op %>% addMarkers(~lon, ~lat, clusterOptions = markerClusterOptions())
leaflet(m2) %>% addTiles() %>% addMarkers(clusterOptions = markerClusterOptions())
library("leafletR", lib.loc="~/R/win-library/3.3")
op <- leaflet(m2)
op <- op %>% addTiles()
op <- op %>% addMarkers(~lon, ~lat, clusterOptions = markerClusterOptions())
leaflet(m2) %>% addTiles() %>% addMarkers(clusterOptions = markerClusterOptions())
detach("package:leaflet", unload=TRUE)
op <- leaflet(m2)
op <- op %>% addTiles()
op <- op %>% addMarkers(~lon, ~lat, clusterOptions = markerClusterOptions())
leaflet(m2) %>% addTiles() %>% addMarkers(clusterOptions = markerClusterOptions())
library("leaflet", lib.loc="~/R/win-library/3.3")
detach("package:leafletR", unload=TRUE)
op <- leaflet(m2)
op <- op %>% addTiles()
op <- op %>% addMarkers(~lon, ~lat, clusterOptions = markerClusterOptions())
leaflet(m2) %>% addTiles() %>% addMarkers(clusterOptions = markerClusterOptions())
remove.packages("leafletR", lib="~/R/win-library/3.3")
op <- leaflet(m2)
op <- op %>% addTiles()
op <- op %>% addMarkers(~lon, ~lat, clusterOptions = markerClusterOptions())
leaflet(m2) %>% addTiles() %>% addMarkers(clusterOptions = markerClusterOptions())
library("leaflet", lib.loc="~/R/win-library/3.3")
op <- leaflet(m2)
op <- op %>% addTiles()
op <- op %>% addMarkers(~lon, ~lat, clusterOptions = markerClusterOptions())
leaflet(m2) %>% addTiles() %>% addMarkers(clusterOptions = markerClusterOptions())
op <- leaflet(m2)
op <- op %>% addTiles()
op <- op %>% addMarkers(~lon, ~lat, clusterOptions = markerClusterOptions())
leaflet(m2) %>% addTiles() %>% addMarkers(clusterOptions = markerClusterOptions())
op <- leaflet(m2)
op <- op %>% addTiles()
op <- op %>% addMarkers(~lon, ~lat, clusterOptions = markerClusterOptions())
leaflet(m2) %>% addTiles() %>% addMarkers(clusterOptions = markerClusterOptions())
op <- leaflet(m2)
op <- op %>% addTiles()
op <- op %>% addMarkers(~lon, ~lat, clusterOptions = markerClusterOptions())
leaflet(m2) %>% addTiles() %>% addMarkers(clusterOptions = markerClusterOptions())
