for(i in 1:length(a)){
a[i]<- vector0[vector==a[i]]
}
a <- Public_Assets$재산명칭
a <- Public_Assets$재산명칭
unique(Public_Assets$재산명칭)
a <- Public_Assets$재산명칭
unique(Public_Assets$재산명칭)
for(i in 1:length(a)){
if(a[i]=='schoo') a[i]<-'school'
a[i]<- vector0[vector==a[i]]
}
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
vars3
vars3
vector0
str(vector0)
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
vector <- c("", "cemetery","dae", "dap", "factory", "fishery", "forest", "googeo","jeon","levee", "mixed", "oil","orchard", "park","parking","pasture","rail", "religion","river","road", "school", "sports","unknown", "water","garage")
vector0 <-c('모두','묘지','대','답','공장용지','양식장','임야','구거','전','제방','잡종지','유지','과수원','공원용지','주차장','목장용지','철도용지','종교용지','하천','도로','학교용지','체육용지','미등록','수도용지','창고용지')
runApp()
runApp()
vector0[vector==a[i]]
vector0[vector==a[i]]
vector==a[i]
a <- Public_Assets$재산명칭
a[i]
Public_Assets$재산명칭
a <- Public_Assets$재산명칭
View(Public_Assets)
a <- Public_Assets$재산명칭
View(Public_Assets)
View(Public_Assets)
Public_Assets = data.frame()
Public_Assets
for(i in 1:length(files)){
data_list[[i]] = read.csv(paste0('data/',files[i]))
tmp = data_list[[i]]
tmp = data.frame(tmp$city, tmp$latitude, tmp$longitude, tmp$공부지목명, tmp$재산면적, tmp$대장가액.원., tmp$avg_price)
colnames(tmp) <- c('city','lat', 'lon', '재산명칭', 'size', 'tot_price', 'avg_price')
tmp = tmp[!duplicated(tmp[,c('lat','lon')]),]
tmp$avg_price = round(tmp$avg_price)
tmp$재산명칭 <- as.character(tmp$재산명칭)
tmp$city <- as.character(tmp$city)
tmp$radius = getRad(tmp$size)
tmp$avg_price_size = get_avg_price(tmp$tot_price,tmp$size)
Public_Assets = rbind(Public_Assets,tmp)
}
Public_Assets$재산명칭
View(Public_Assets$재산명칭)
View(Public_Assets$재산명칭)
a <- Public_Assets$재산명칭
View(Public_Assets)
View(Public_Assets$재산명칭)
View(Public_Assets$재산명칭)
runApp()
runApp()
brewer.pal(12,"Paired")
runApp()
a <- Public_Assets$재산명칭
View(Public_Assets)
Public_Assets
Public_Assets$재산명칭
runApp()
runApp()
a <- Public_Assets$재산명칭
a
runApp()
runApp()
vector <- c("park","factory", "orchard", "googeo", "dap", "dae", "road","pasture","cemetery", "unknown", "water","fishery", "oil","forest","mixed","jeon", "levee","religion","parking", "garage", "rail","sports", "river","school")
vector0 <-c('공원용지','공장용지','과수원','구거','답','대','도로','목장용지','묘지','미등록','수도용지','양식장','유지','임야','잡종지','전','제방','종교용지','주차장','창고용지','철도용지','체육용지','하천','학교용지')
runApp()
a <- Public_Assets$재산명칭
a
a[i]
a
vector==a[i]
vector0[vector==a[i]]
vector0[]
vector==a[i]
Public_Assets$재산명칭
vector==a[i]
a
a[i]
Public_Assets$재산명칭
files = dir('data/')
data_list = list()
Public_Assets = data.frame()
for(i in 1:length(files)){
data_list[[i]] = read.csv(paste0('data/',files[i]))
tmp = data_list[[i]]
tmp = data.frame(tmp$city, tmp$latitude, tmp$longitude, tmp$공부지목명, tmp$재산면적, tmp$대장가액.원., tmp$avg_price)
colnames(tmp) <- c('city','lat', 'lon', '재산명칭', 'size', 'tot_price', 'avg_price')
tmp = tmp[!duplicated(tmp[,c('lat','lon')]),]
tmp$avg_price = round(tmp$avg_price)
tmp$재산명칭 <- as.character(tmp$재산명칭)
tmp$city <- as.character(tmp$city)
tmp$radius = getRad(tmp$size)
tmp$avg_price_size = get_avg_price(tmp$tot_price,tmp$size)
Public_Assets = rbind(Public_Assets,tmp)
}
Public_Assets$재산명칭
a <- Public_Assets$재산명칭
for(i in 1:length(a)){
a[i]<- vector0[vector==a[i]]
}
Public_Assets$재산명칭 <- a
runApp()
files = dir('data/')
data_list = list()
Public_Assets = data.frame()
for(i in 1:length(files)){
data_list[[i]] = read.csv(paste0('data/',files[i]))
tmp = data_list[[i]]
tmp = data.frame(tmp$city, tmp$latitude, tmp$longitude, tmp$공부지목명, tmp$재산면적, tmp$대장가액.원., tmp$avg_price)
colnames(tmp) <- c('city','lat', 'lon', '재산명칭', 'size', 'tot_price', 'avg_price')
tmp = tmp[!duplicated(tmp[,c('lat','lon')]),]
tmp$avg_price = round(tmp$avg_price)
tmp$재산명칭 <- as.character(tmp$재산명칭)
tmp$city <- as.character(tmp$city)
tmp$radius = getRad(tmp$size)
tmp$avg_price_size = get_avg_price(tmp$tot_price,tmp$size)
Public_Assets = rbind(Public_Assets,tmp)
}
a <- Public_Assets$재산명칭
for(i in 1:length(a)){
a[i]<- vector0[vector==a[i]]
}
files = dir('data/')
data_list = list()
Public_Assets = data.frame()
for(i in 1:length(files)){
data_list[[i]] = read.csv(paste0('data/',files[i]))
tmp = data_list[[i]]
tmp = data.frame(tmp$city, tmp$latitude, tmp$longitude, tmp$공부지목명, tmp$재산면적, tmp$대장가액.원., tmp$avg_price)
colnames(tmp) <- c('city','lat', 'lon', '재산명칭', 'size', 'tot_price', 'avg_price')
tmp = tmp[!duplicated(tmp[,c('lat','lon')]),]
tmp$avg_price = round(tmp$avg_price)
tmp$재산명칭 <- as.character(tmp$재산명칭)
tmp$city <- as.character(tmp$city)
tmp$radius = getRad(tmp$size)
tmp$avg_price_size = get_avg_price(tmp$tot_price,tmp$size)
Public_Assets = rbind(Public_Assets,tmp)
}
a <- Public_Assets$재산명칭
for(i in 1:length(a)){
a[i]<- vector0[vector==a[i]]
}
files = dir('data/')
data_list = list()
Public_Assets = data.frame()
for(i in 1:length(files)){
data_list[[i]] = read.csv(paste0('data/',files[i]))
tmp = data_list[[i]]
tmp = data.frame(tmp$city, tmp$latitude, tmp$longitude, tmp$공부지목명, tmp$재산면적, tmp$대장가액.원., tmp$avg_price)
colnames(tmp) <- c('city','lat', 'lon', '재산명칭', 'size', 'tot_price', 'avg_price')
tmp = tmp[!duplicated(tmp[,c('lat','lon')]),]
tmp$avg_price = round(tmp$avg_price)
tmp$재산명칭 <- as.character(tmp$재산명칭)
tmp$city <- as.character(tmp$city)
tmp$radius = getRad(tmp$size)
tmp$avg_price_size = get_avg_price(tmp$tot_price,tmp$size)
Public_Assets = rbind(Public_Assets,tmp)
}
a <- Public_Assets$재산명칭
for(i in 1:length(a)){
a[i]<- vector0[vector==a[i]]
}
files = dir('data/')
data_list = list()
Public_Assets = data.frame()
for(i in 1:length(files)){
data_list[[i]] = read.csv(paste0('data/',files[i]))
tmp = data_list[[i]]
tmp = data.frame(tmp$city, tmp$latitude, tmp$longitude, tmp$공부지목명, tmp$재산면적, tmp$대장가액.원., tmp$avg_price)
colnames(tmp) <- c('city','lat', 'lon', '재산명칭', 'size', 'tot_price', 'avg_price')
tmp = tmp[!duplicated(tmp[,c('lat','lon')]),]
tmp$avg_price = round(tmp$avg_price)
tmp$재산명칭 <- as.character(tmp$재산명칭)
tmp$city <- as.character(tmp$city)
tmp$radius = getRad(tmp$size)
tmp$avg_price_size = get_avg_price(tmp$tot_price,tmp$size)
Public_Assets = rbind(Public_Assets,tmp)
}
a <- Public_Assets$재산명칭
#for(i in 1:length(a)){
a[i]<- vector0[vector==a[i]]
vector==a[i]
a[i]
files = dir('data/')
data_list = list()
Public_Assets = data.frame()
for(i in 1:length(files)){
data_list[[i]] = read.csv(paste0('data/',files[i]))
tmp = data_list[[i]]
tmp = data.frame(tmp$city, tmp$latitude, tmp$longitude, tmp$공부지목명, tmp$재산면적, tmp$대장가액.원., tmp$avg_price)
colnames(tmp) <- c('city','lat', 'lon', '재산명칭', 'size', 'tot_price', 'avg_price')
tmp = tmp[!duplicated(tmp[,c('lat','lon')]),]
tmp$avg_price = round(tmp$avg_price)
tmp$재산명칭 <- as.character(tmp$재산명칭)
tmp$city <- as.character(tmp$city)
tmp$radius = getRad(tmp$size)
tmp$avg_price_size = get_avg_price(tmp$tot_price,tmp$size)
Public_Assets = rbind(Public_Assets,tmp)
}
a <- Public_Assets$재산명칭
#for(i in 1:length(a)){
#a[i]<- vector0[vector==a[i]]
#}
#Public_Assets$재산명칭 <- a
vector0[]
a[i]
runApp()
vector==a[i]
vector0[vector==a[i]]
runApp()
runApp()
shiny::runApp()
runApp('C:/Users/Victor/Desktop/현황표 탭 추가 코드')
shiny::runApp()
runApp()
runApp()
setwd("C:/Users/Victor/Desktop/현황표 탭 추가 코드")
runApp()
runApp()
runApp()
runApp()
setwd("C:/Users/Victor/Desktop/Visualization_by_Shiny")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
DT
runApp()
output$P.A.table <- DT::renderDataTable({
df <- Public_Assets %>%
filter(
is.null(input$cities) | city %in% input$cities,
is.null(input$assets) | 재산명칭 %in% input$assets
) %>%
mutate(Action = paste('<a class="go-map" href="" data-lat="', lat, '" data-long="', lon, '" data-city="', city, '"><i class="fa fa-crosshairs"></i></a>', sep=""))
action <- DT::dataTableAjax(session, df)
DT::datatable(df, options = list(ajax = list(url = action)), escape = FALSE)
})
runApp()
P.A.table
output
content <- apply(selectedvc, 1, entry)
content <- paste0(content, collapse = "\n")
library(shiny)
library(leaflet)
library(RColorBrewer)
library(scales)
library(lattice)
library(dplyr)
draw <- Public_Assets
shinyServer(function(input, output, session) {
# leaflet 지도를 출력합니다.
output$map <- renderLeaflet({
leaflet() %>%
addTiles(
urlTemplate = "//{s}.tiles.mapbox.com/v3/jcheng.map-5ebohr46/{z}/{x}/{y}.png",
attribution = 'Maps by <a href="http://www.mapbox.com/">Mapbox</a>'
) %>%
setView(lng = 127.1949, lat = 37.6454, zoom = 10)
})
# UI 상에서 보고자 하는 시를 클릭할 때마다 서버가 반응하여 해당하는 시의 데이터를 불러옵니다.
drawvalue <- reactive({
if (input$city == 'All') {
t <- Public_Assets
if (input$type == ''){return(t)}else{
t <- filter(t, 재산명칭 == input$type)
return(t)}
}
else if (input$city == 'Gapyeong') {
t <- filter(Public_Assets, city == input$city)
if (input$type == ''){return(t)}else{
t <- filter(t, 재산명칭 == input$type)
return(t)}
}
else if (input$city == 'Gimpo') {
t <- filter(Public_Assets, city == input$city)
if (input$type == ''){return(t)}else{
t <- filter(t, 재산명칭 == input$type)
return(t)}
}
else if (input$city == 'Goyang') {
t <- filter(Public_Assets, city == input$city)
if (input$type == ''){return(t)}else{
t <- filter(t, 재산명칭 == input$type)
return(t)}
}
else if (input$city == 'Gwangju') {
t <- filter(Public_Assets, city == input$city)
if (input$type == ''){return(t)}else{
t <- filter(t, 재산명칭 == input$type)
return(t)}
}
else {
t <- filter(Public_Assets, city == input$city)
if (input$type == ''){return(t)}else{
t <- filter(t, 재산명칭 == input$type)
return(t)}
}
})
# User가 선택한 데이터 정보를 지도에 원으로 표시합니다. 이 때, UI 상의 legend에서
# 특정 재산 형태를 클릭하면 해당하는 공유 재산만을 지도에 뿌려줍니다.
# 또한 cluster를 클릭할 경우, 주변 공유 재산끼리 묶어 다각형 형태로 군집화하여 지도에 표시해 줍니다.
observe({
sizeBy <- input$size
draw <- drawvalue()
colorBy <- "재산명칭"
colorData <- draw[[colorBy]]
set = c(brewer.pal(12,"Paired"),brewer.pal(6,"Set2"),brewer.pal(7, "Set3"))
if(length(unique(colorData))==1){
pal <- colorFactor(set[sample((1:25),1)], colorData)
}
else{
pal <- colorFactor(set, colorData)
}
if (input$cluster == TRUE){
leafletProxy("map", data = draw) %>%
clearShapes() %>%
showGroup('Cluster') %>%
addCircles(~lon, ~lat, radius=draw[[sizeBy]], group = "Circle",
stroke=FALSE, fillOpacity=0.8, fillColor=pal(colorData)) %>%
addCircleMarkers(~lon, ~lat, radius = 0, group = "Cluster",
clusterOptions = markerClusterOptions())%>%
addLegend("bottomleft", pal=pal, values=colorData, title=colorBy,
layerId="colorLegend")
}else{
leafletProxy("map", data = draw) %>%
clearShapes() %>%
hideGroup('Cluster') %>%
addCircles(~lon, ~lat, radius=draw[[sizeBy]], group = "Circle",
stroke=FALSE, fillOpacity=0.8, fillColor=pal(colorData)) %>%
addLegend("bottomleft", pal=pal, values=colorData, title=colorBy,
layerId="colorLegend")
}
})
# 지도 상에서 특정 공유 재산 원을 클릭했을 때, 해당 공유 재산의 위/경도 및 기본 정보가
# 팝업 형식으로 지도 위에 출력됩니다.
showvcPopup <- function(eventid, latitude, longitude) {
draw <- drawvalue()
selectedvc <- filter(draw, lat == latitude, lon == longitude)
entry <- function(row){
result <- as.character(tagList(
tags$strong(sprintf("재산명칭: %s", row[4])), tags$br(),
sprintf("위도 | 경도: %s | %s", row[2],row[3]), tags$br(),
sprintf("크기: %s", row[5]), tags$br(),
sprintf("대장가액: %s", row[6]), tags$br(),
sprintf("평균가격: %s", row[7]), tags$br()))
return(result)
}
content <- apply(selectedvc, 1, entry)
content <- paste0(content, collapse = "\n")
leafletProxy("map") %>% addPopups(longitude, latitude, content, layerId = eventid)
}
# When map is clicked, show a popup with assets info
observe({
leafletProxy("map") %>% clearPopups()
event <- input$map_shape_click
if (is.null(event))
return()
isolate({
showvcPopup(event$id, event$lat, event$lng)
})
})
## See Your Neighbourhood ###########################################
observe({
assets <- if (is.null(input$cities)) character(0) else {
filter(Public_Assets, city %in% input$cities) %>%
`$`('재산명칭') %>%
unique() %>%
sort()
}
stillSelected <- isolate(input$assets[input$assets %in% assets])
updateSelectInput(session, "assets", choices = assets,
selected = stillSelected)
})
# When actions is clicked, call popup function for the corresponding latitude and longitude
observe({
if (is.null(input$goto))
return()
isolate({
map <- leafletProxy("map")
map %>% clearPopups()
dist <- 0.02
event <- input$map_shape_click
lat <- input$goto$lat
lng <- input$goto$lng
showvcPopup(event$id, lat, lng)
map %>% fitBounds(lng - dist, lat - dist, lng + dist, lat + dist)
})
})
output$P.A.table <- DT::renderDataTable({
df <- Public_Assets %>%
filter(
is.null(input$cities) | city %in% input$cities,
is.null(input$assets) | 재산명칭 %in% input$assets
) %>%
mutate(Action = paste('<a class="go-map" href="" data-lat="', lat, '" data-long="', lon, '" data-city="', city, '"><i class="fa fa-crosshairs"></i></a>', sep=""))
action <- DT::dataTableAjax(session, df)
DT::datatable(df, options = list(ajax = list(url = action)), escape = FALSE)
})
})
runApp()
P.A.table
runApp()
install.packages('DT')
library(DT)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
cities
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
vector1 <- c("Gapyeong","Gimpo","Goyang","Gwangju","Namyangju")
vecotr2 <- c("가평","김포","고양","광주","남양주")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
