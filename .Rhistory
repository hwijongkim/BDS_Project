df$address[1]
df$address[2]
source('get_longlat.R')
rm(list=ls())
source('get_longlat.R')
source('get_longlat.R')
source('get_longlat.R')
source('get_longlat.R', encoding='euc-kr')
source('get_longlat.R')
source('get_longlat.R', encoding='euc-kr')
source('get_longlat.R', encoding='euc-kr')
source('get_longlat.R')
files <- dir('gg_public_assets')
data_list <- list()
clientID <- read.csv('naver_api.txt',header=FALSE,stringsAsFactor=FALSE)[2,1]
clientSecret <-read.csv('naver_api.txt',header=FALSE,
stringsAsFactor=FALSE)[2,2]
for(i in 1:32){
data_list[[i]] <- read.csv(paste('gg_public_assets/',files[i],sep=""))
df <- data_list[[i]]
df$address <- paste(df$시군구명,df$읍면동명,df$리명,df$본번,"-",df$부번)
data_list[[i]] <- df
}
source('get_longlat.R')
source('get_longlat.R')
source('get_longlat.R', encoding='euc-kr')
source('get_longlat.R', encoding='UTF-8')
source('get_longlat.R', encoding='UTF-8')
source('get_longlat.R', encoding='UTF-8')
rm(list=ls())
source('get_longlat.R', encoding='UTF-8')
source('using_kakaoapi.R')
source('make_data_for_clustering.R',encoding = "UTF-8")
data <- read.csv('Project/include_lonlat/경기도 동두천.csv',stringsAsFactor = FALSE)
data <- read.csv('include_lonlat/경기도 동두천.csv',stringsAsFactor = FALSE)
sub <- make_subset(data)
total <- sum_by_category(sub)
source('make_data_for_clustering.R',encoding = "UTF-8")
source('using_kakaoapi.R')
source('using_kakaoapi.R')
source('make_data_for_clustering.R',encoding = "UTF-8")
data <- read.csv('include_lonlat/경기도 동두천.csv',stringsAsFactor = FALSE)
sub <- make_subset(data)
total <- sum_by_category(sub)
source('make_data_for_clustering.R',encoding = "UTF-8")
total <- sum_by_category(sub)
total <- sum_by_category(sub)
source('using_kakaoapi.R')
source('make_data_for_clustering.R',encoding = "UTF-8")
source('make_data_for_clustering.R',encoding = "UTF-8")
total <- sum_by_category(sub)
ana_data1 <- cbind(sub,total)
ana_data2 <- cbind(sub,total)
size_factor <- sapply(ana_data2$재산면적,function(x) {
if(x<300) x=1
else if(x>=300 && x<500) x=2
else if(x>=500 && x<1000) x=3
else x=4
})
ana_data2$재산면적 <- as.factor(size_factor)
str(ana_data2)
library(cluster)
d_matrix <- daisy(ana_data2[,-c(1,2)],metric="gower")
h <- hclust(d_matrix)
plot(h)
install.packages("NbClust")
library(NbClust)
nc = NbClust(d_matrix, min.nc = 2, max.nc = 20, method = "kmeans")
nc = NbClust(d_matrix, min.nc = 2, max.nc = 15, method = "kmeans")
nc = NbClust(d_matrix, min.nc = 2, max.nc = 15, method = "hclust")
nc = NbClust(d_matrix, min.nc = 2, max.nc = 15, method = "kmeans")
nc = NbClust(d_matrix, min.nc = 2, max.nc = 30, method = "kmeans")
nc = NbClust(d_matrix, min.nc = 2, max.nc = 10, method = "kmeans")
nc = NbClust(d_matrix, min.nc = 2, max.nc = 14, method = "kmeans")
nc = NbClust(d_matrix, min.nc = 2, max.nc = 5, method = "kmeans")
library(fpc)
install.packages("fpc")
library(fpc)
clust <- numeric(20)
for(k in 2:20){
clust[[k]] <- pam(d_matrix,k)$silinfo$avg.width
k.best <- which.max(clust)
}
k.best
for(k in 2:30){
clust[[k]] <- pam(d_matrix,k)$silinfo$avg.width
k.best <- which.max(clust)
}
k.best
for(k in 2:15){
clust[[k]] <- pam(d_matrix,k)$silinfo$avg.width
k.best <- which.max(clust)
}
k.best
clust <- numeric(20)
for(k in 2:15){
clust[[k]] <- pam(d_matrix,k)$silinfo$avg.width
k.best <- which.max(clust)
}
k.best
for(k in 2:10){
clust[[k]] <- pam(d_matrix,k)$silinfo$avg.width
k.best <- which.max(clust)
}
clust <- numeric(20)
for(k in 2:10){
clust[[k]] <- pam(d_matrix,k)$silinfo$avg.width
k.best <- which.max(clust)
}
k.best
clust <- numeric(20)
for(k in 2:8){
clust[[k]] <- pam(d_matrix,k)$silinfo$avg.width
k.best <- which.max(clust)
}
k.best
clust <- numeric(20)
for(k in 2:5){
clust[[k]] <- pam(d_matrix,k)$silinfo$avg.width
k.best <- which.max(clust)
}
k.best
clust <- numeric(20)
for(k in 2:6){
clust[[k]] <- pam(d_matrix,k)$silinfo$avg.width
k.best <- which.max(clust)
}
k.best
k = kmeans(d_matrix, 4, iter.max = 1000)
summary(k)
k = kmeans(d_matrix, centers = 4, iter.max = 10000)
k$centers
k$centers[1]
k$cluster
str(k$cluster)
k$cluster = as.factor(k$cluster)
qplot(clour=cluster, data=k)
library(ggplot2)
qplot(clour=cluster, data=k)
qplot(clour=cluster, data=k$cluster)
qplot(colour=cluster, data=k$cluster)
qplot(colour=cluster, data=k)
qplot(colour=k$cluster, data=d_matrix)
k = kmeans(ana_data2, centers = 4, iter.max = 10000)
qplot(colour=k$cluster, data=d_matrix)
qplot(colour=cluster, data=d_matrix)
ggplot(ana_data2, aes(color=k$cluster)) + geom_point()
plot(h)
View(ana_data2)
source('make_data_for_clustering.R',encoding = "UTF-8")
data <- read.csv('include_lonlat/경기도 동두천.csv',stringsAsFactor = FALSE)
sub <- make_subset(data)
View(sub)
total <- sum_by_category(sub)
source('make_data_for_clustering.R',encoding = "UTF-8")
source('using_kakaoapi.R')
total <- sum_by_category(sub)
ana_data1 <- cbind(sub,total)
ana_data2 <- cbind(sub,total)
View(ana_data2)
size_factor <- sapply(ana_data2$재산면적,function(x) {
if(x<300) x=1
else if(x>=300 && x<500) x=2
else if(x>=500 && x<1000) x=3
else x=4
})
ana_data2$재산면적 <- as.factor(size_factor)
str(ana_data2)
d_matrix <- daisy(ana_data2[,-c(1,2)],metric="gower")
h <- hclust(d_matrix)
plot(h)
k = kmeans(d_matrix, centers = 4, iter.max = 10000)
table(ana_data2$재산면적,k$cluster)
table(-ana_data2$재산면적,k$cluster)
clust <- numeric(20)
for(k in 2:20){
clust[[k]] <- pam(d_matrix,k)$silinfo$avg.width
k.best <- which.max(clust)
}
k.best
clust <- numeric(20)
for(k in 3:20){
clust[[k]] <- pam(d_matrix,k)$silinfo$avg.width
k.best <- which.max(clust)
}
k.best
clust <- numeric(20)
for(k in 4:20){
clust[[k]] <- pam(d_matrix,k)$silinfo$avg.width
k.best <- which.max(clust)
}
k.best
View(ana_data2)
d = dbscan(d_matrix, 1.15)
d
str(d)
d$cluster
d$eps
d$MinPts
d$isseed
d = dbscan(d_matrix, eps=1.15, MinPts = 3)
d
d$cluster
d = dbscan(d_matrix, eps=1, MinPts = 2)
d$cluster
d = dbscan(d_matrix, eps=0.1, MinPts = 1)
d$cluster
d = dbscan(d_matrix, eps=0.5, MinPts = 1)
d$cluster
d = dbscan(d_matrix, eps=0.5, MinPts = 2)
d$cluster
d = dbscan(d_matrix, eps=0.8, MinPts = 2)
d$cluster
plot(d)
d
d = dbscan(d_matrix, eps=0.8, MinPts = 3)
d$cluster
d
d$cluster
d = dbscan(d_matrix, eps=0.8, MinPts = 5)
d$cluster
d
d = dbscan(d_matrix, eps=0.8, MinPts = 3)
d
d = dbscan(d_matrix, eps=0.5, MinPts = 3)
d
d = dbscan(d_matrix, eps=0.5, MinPts = 7)
d
d = dbscan(d_matrix, eps=0.5, MinPts = 10)
d
d = dbscan(d_matrix, eps=1, MinPts = 5)
d
d = dbscan(d_matrix, eps=0.7, MinPts = 5)
d
d = dbscan(d_matrix, eps=0.7, MinPts = 3)
d
d = dbscan(d_matrix, eps=1.15, MinPts = 3)
d
d = dbscan(d_matrix, eps=1.1, MinPts = 3)
d
d = dbscan(d_matrix, eps=1.1, MinPts = 4)
d
d = dbscan(d_matrix, eps=1.1, MinPts = 5)
d
d = dbscan(d_matrix, eps=1.1, MinPts = 6)
d
d = dbscan(d_matrix, eps=0.8, MinPts = 6)
d
d = dbscan(d_matrix, eps=0.7, MinPts = 6)
d
d = dbscan(d_matrix, eps=0.9, MinPts = 6)
d
plot(d)
d$eps
d$cluster
d = dbscan(d_matrix, eps=10, MinPts = 4)
d
d = dbscan(d_matrix, eps=8, MinPts = 4)
d
d = dbscan(d_matrix, eps=5, MinPts = 4)
d
d = dbscan(d_matrix, eps=3, MinPts = 4)
d
d = dbscan(d_matrix, eps=2, MinPts = 4)
d
d = dbscan(d_matrix, eps=1, MinPts = 4)
d
d = dbscan(d_matrix, eps=0.9, MinPts = 4)
d
d = dbscan(d_matrix, eps=0.8, MinPts = 4)
d
d = dbscan(d_matrix, eps=0.85, MinPts = 4)
d
d = dbscan(d_matrix, eps=0.88, MinPts = 4)
d
d = dbscan(d_matrix, eps=0.9, MinPts = 4)
d
d$isseed
d
d_matrix
View(d_matrix)
d_matrix[1,1]
d
d[1]
d$cluster[1]
d$cluster[2]
d
str(d)
d = dbscan(d_matrix, eps=0.9, MinPts = 5)
d
d = dbscan(d_matrix, eps=0.9, MinPts = 3)
d
d = dbscan(d_matrix, eps=0.9, MinPts = 4)
d
d = dbscan(d_matrix, eps=1, MinPts = 4)
d
d = dbscan(d_matrix, eps=1, MinPts = 5)
d
d = dbscan(d_matrix, eps=1, MinPts = 6)
d
d = dbscan(d_matrix, eps=1, MinPts = 7)
d
d = dbscan(d_matrix, eps=0.9, MinPts = 7)
d
d = dbscan(d_matrix, eps=0.9, MinPts = 8)
d
d = dbscan(d_matrix, eps=1, MinPts = 8)
d
d = dbscan(d_matrix, eps=0.8, MinPts = 8)
d
plot(h)
k.best
dt1 = iris
dd = dbscan(iris, eps=1, MinPts = 5)
install.packages("subspace")
install.packages("ProClus")
library(subspace)
dd = ProClus(d_matrix, k=5, d=3)
dd = ProClus(iris, k=5, d=3)
pc = ProClus(d_matrix, k=5, d = 18)
pc = ProClus(iris$Species, k=5, d = 18)
b = numeric(1000)
b[1:50] = 1
b[51:300] = 2
b[500:700] = 3
pc = ProClus(b, k=4, d = 18)
data("subspace_dataset")
View(subspace_dataset)
a = ProClus(subspace_dataset, k=12, d=2.5)
a
a[[1]]$objects
str(a)
str(d_matrix)
a = ProClus(d_matrix, k=12, d=2.5)
str(a)
dd = dbscan(iris, eps=1, MinPts = 5)
d
ggplot(d_matrix, aes(x=x, y=y)) + geom_point(color=d$cluster+1)
ggplot(ana_data2, aes(x=x, y=y)) + geom_point(color=d$cluster+1)
d
data = read.csv('ana_data/경기도 가평r1000.csv')
data = read.csv('Project/ana_data/경기도 가평r1000.csv')
rm(list=ls())
data = read.csv('Project/ana_data/경기도 가평군_r1000.csv')
data = read.csv('ana_data/경기도 가평군_r1000.csv')
View(data)
d_matrix = daisy(data[,-c(1,2,3,4)],metric='gower')
h = hclust(d_matrix)
plot(h)
k = kmeans(d_matrix, centerc=4, iter.max = 10000)
k = kmeans(d_matrix, centers=4, iter.max = 10000)
plot(k)
k$centers
k$cluster
View(k$cluster)
k$withinss
str(d_matrix)
k$withinss
k$tot.withinss
data1 = read.csv('ana_data/경기도 가평군_r1000.csv')
rm(list=ls())
data1 = read.csv('ana_data/경기도 가평군_r1000.csv')
d_matrix = daisy(data1[,-c(1,2,3,4)],metric='gower')
table(data1$size_factor, k$cluster)
k = kmeans(d_matrix, centers=4, iter.max = 10000)
h = hclust(d_matrix)
table(data1$size_factor, k$cluster)
str(k$cluster)
k0=data.frame()
for(i in 1:6){
k2 = kmeans(d_matrix, i, iter.max=1000)
k3 = cbind(i, k2$tot.withinss)
k0 = rbind(k0,k3)
}
plot(k0, type='b')
for(i in 1:20){
k2 = kmeans(d_matrix, i, iter.max=10000)
k3 = cbind(i, k2$tot.withinss)
k0 = rbind(k0,k3)
}
plot(k0, type='b')
k0=data.frame()
for(i in 1:20){
k2 = kmeans(d_matrix, i, iter.max=1000)
k3 = cbind(i, k2$tot.withinss)
k0 = rbind(k0,k3)
}
plot(k0, type='b')
d = dbscan(d_matrix, eps=0.8, MinPts = 8)
d
d = dbscan(d_matrix, eps=0.8, MinPts = 5)
d
z_data = data1[,-c(1,2,3,4)]
View(z_data)
z_data = scale(z_data)
View(z_data)
z_data = scale(z_data[,-1])
View(z_data)
z_data = data1[,-c(1,2,3,4)]
z_data = [-which(z_data$valueBysize1==Inf),]
z_data = [which(z_data$valueBysize1!=Inf),]
z_data = z_data[which(z_data$valueBysize1!=Inf),]
z_data = scale(z_data[,-1])
View(z_data)
k0=data.frame()
for(i in 1:20){
k2 = kmeans(z_data, i, iter.max=1000)
k3 = cbind(i, k2$tot.withinss)
k0 = rbind(k0,k3)
}
plot(k0, type='b')
k0=data.frame()
for(i in 2:20){
k2 = kmeans(z_data, i, iter.max=1000)
k3 = cbind(i, k2$tot.withinss)
k0 = rbind(k0,k3)
}
plot(k0, type='b')
for(i in 2:20){
k2 = kmeans(z_data, i, iter.max=10000)
k3 = cbind(i, k2$tot.withinss)
k0 = rbind(k0,k3)
}
plot(k0, type='b')
k0=data.frame()
for(i in 2:20){
k2 = kmeans(z_data, i, iter.max=10000)
k3 = cbind(i, k2$tot.withinss)
k0 = rbind(k0,k3)
}
plot(k0, type='b')
h = hclust(d_matrix)
plot(h)
plot(k0, type='b')
k0=data.frame()
for(i in 2:30){
k2 = kmeans(z_data, i, iter.max=10000)
k3 = cbind(i, k2$tot.withinss)
k0 = rbind(k0,k3)
}
plot(k0, type='b')
for(i in 2:40){
k2 = kmeans(z_data, i, iter.max=10000)
k3 = cbind(i, k2$tot.withinss)
k0 = rbind(k0,k3)
}
plot(k0, type='b')
k0=data.frame()
for(i in 2:40){
k2 = kmeans(z_data, i, iter.max=10000)
k3 = cbind(i, k2$tot.withinss)
k0 = rbind(k0,k3)
}
plot(k0, type='b')
k0=data.frame()
for(i in 2:50){
k2 = kmeans(z_data, i, iter.max=10000)
k3 = cbind(i, k2$tot.withinss)
k0 = rbind(k0,k3)
}
plot(k0, type='b')
View(data1)
d_matrix = dist(data1[,-c(1,2,3,4,5)])
h = hclust(d_matrix)
z_data = data1[,-c(1,2,3,4,5)]
z_data = z_data[which(z_data$valueBysize1!=Inf),]
z_data = scale(z_data[,-1])
d_matrix = dist(z_data)
h = hclust(d_matrix)
plot(h)
plot(k0, type='b')
k = kmeans(z_data, centers=11, iter.max = 10000)
k$tot.withinss
k = kmeans(z_data, centers=6, iter.max = 10000)
k$tot.withinss
k = kmeans(z_data, centers=12, iter.max = 10000)
k$tot.withinss
k = kmeans(z_data, centers=9, iter.max = 10000)
k$tot.withinss
k = kmeans(z_data, centers=10, iter.max = 10000)
k$tot.withinss
k = kmeans(z_data, centers=11, iter.max = 10000)
k$cluster
View(data1)
str(k$cluster)
data2 = data1
data2$label = k$cluster
data2 = data2[which(z_data$valueBysize1!=Inf),]
data2 = data2[which(data2$valueBysize1!=Inf),]
data2$label = k$cluster
View(data2)
length(data2$label)
unique(data2$label)
length(unique(data2$label))
sort(data2, data2$label)
?sort
str(data2)
tmp = data.frame()
str(data2$label)
install.packages('factoextra')
library(factoextra)
res.dist = get_dist(z_data, stand = TRUE)
fviz_dist = list(low='#00AFBB', mid='white', high = '#FC4E07')
fviz_dist(res.dist, gradient = list(low='#00AFBB', mid='white', high = '#FC4E07'))
fviz_nbclust(z_data, kmeans, method = 'gap_stat')
?fviz_nbclust
library(NbClust)
res.nbclust = NbClust(z_data, min.nc=2, max.nc=13)
res.nbclust = NbClust(z_data, min.nc=2, max.nc=13, method = "complete")
fviz_nbclust(res.nbclust)
res.hc = eclust(z_data, "hclust", k=3, graph=FALSE)
fviz_dend(res.hc, rect=TRUE, show_labels = FALSE)
